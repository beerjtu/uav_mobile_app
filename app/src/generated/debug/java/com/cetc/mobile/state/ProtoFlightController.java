// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state/FlightController.proto

package com.cetc.mobile.state;

public final class ProtoFlightController {
  private ProtoFlightController() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface FlightControllerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:FlightController)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool areMotorsOn = 1;</code>
     */
    boolean getAreMotorsOn();

    /**
     * <code>optional bool isFlying = 2;</code>
     */
    boolean getIsFlying();

    /**
     * <code>optional double latitude = 3;</code>
     */
    double getLatitude();

    /**
     * <code>optional double longitude = 4;</code>
     */
    double getLongitude();

    /**
     * <pre>
     *Returns the relative altitude of the aircraft relative to take off location, measured by barometer, in meters.
     * </pre>
     *
     * <code>optional double altitude = 5;</code>
     */
    double getAltitude();

    /**
     * <pre>
     *Relative altitude of the aircraft home location relative to sea level, in meters.(In flightControllerState)
     * </pre>
     *
     * <code>optional float takeoffLocationAltitude = 6;</code>
     */
    float getTakeoffLocationAltitude();

    /**
     * <code>optional double pitch = 7;</code>
     */
    double getPitch();

    /**
     * <code>optional double roll = 8;</code>
     */
    double getRoll();

    /**
     * <code>optional double yaw = 9;</code>
     */
    double getYaw();

    /**
     * <code>optional float velocityX = 10;</code>
     */
    float getVelocityX();

    /**
     * <code>optional float velocityY = 11;</code>
     */
    float getVelocityY();

    /**
     * <code>optional float velocityZ = 12;</code>
     */
    float getVelocityZ();

    /**
     * <code>optional int32 flightTimeInSeconds = 13;</code>
     */
    int getFlightTimeInSeconds();

    /**
     * <code>optional .FlightController.FlightMode flightMode = 14;</code>
     */
    int getFlightModeValue();
    /**
     * <code>optional .FlightController.FlightMode flightMode = 14;</code>
     */
    com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode getFlightMode();

    /**
     * <code>optional int32 GPSSatelliteCount = 15;</code>
     */
    int getGPSSatelliteCount();

    /**
     * <code>optional .FlightController.GPSSignalLevel GPSgSignalLevel = 16;</code>
     */
    int getGPSgSignalLevelValue();
    /**
     * <code>optional .FlightController.GPSSignalLevel GPSgSignalLevel = 16;</code>
     */
    com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel getGPSgSignalLevel();

    /**
     * <code>optional .FlightController.FlightWindWarning flightWindWarning = 17;</code>
     */
    int getFlightWindWarningValue();
    /**
     * <code>optional .FlightController.FlightWindWarning flightWindWarning = 17;</code>
     */
    com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning getFlightWindWarning();

    /**
     * <pre>
     *The estimated remaining time, in seconds, it will take the aircraft to go home with a 10% battery buffer remaining. This time includes landing the aircraft. If the aircraft is using the simulator, this value will be 0.
     * </pre>
     *
     * <code>optional int32 remainingFlightTime = 18;</code>
     */
    int getRemainingFlightTime();

    /**
     * <pre>
     *The estimated time, in seconds, needed for the aircraft to go home from its current location.
     * </pre>
     *
     * <code>optional int32 timeNeededToGoHome = 19;</code>
     */
    int getTimeNeededToGoHome();

    /**
     * <code>optional .FlightController.AirSenseWarningLevel airSenseWarningLevel = 20;</code>
     */
    int getAirSenseWarningLevelValue();
    /**
     * <code>optional .FlightController.AirSenseWarningLevel airSenseWarningLevel = 20;</code>
     */
    com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel getAirSenseWarningLevel();

    /**
     * <pre>
     *Altitude of the mobile station's receiver 1 antenna relative, to the ground system location. Units are meters.
     * </pre>
     *
     * <code>optional float mobileStationAltitude = 21;</code>
     */
    float getMobileStationAltitude();

    /**
     * <pre>
     *The fusion altitude of the mobile station. The flight controller fuses the data from GPS, RTK and the barometer. The flight controller uses this altitude for navigation (e.g. waypoint mission) when RTK is available.
     * </pre>
     *
     * <code>optional float fusionMobileStationAltitude = 22;</code>
     */
    float getFusionMobileStationAltitude();

    /**
     * <pre>
     *Altitude of the base station above sea level, in meters.
     * </pre>
     *
     * <code>optional float baseStationAltitude = 23;</code>
     */
    float getBaseStationAltitude();
  }
  /**
   * Protobuf type {@code FlightController}
   */
  public  static final class FlightController extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:FlightController)
      FlightControllerOrBuilder {
    // Use FlightController.newBuilder() to construct.
    private FlightController(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlightController() {
      areMotorsOn_ = false;
      isFlying_ = false;
      latitude_ = 0D;
      longitude_ = 0D;
      altitude_ = 0D;
      takeoffLocationAltitude_ = 0F;
      pitch_ = 0D;
      roll_ = 0D;
      yaw_ = 0D;
      velocityX_ = 0F;
      velocityY_ = 0F;
      velocityZ_ = 0F;
      flightTimeInSeconds_ = 0;
      flightMode_ = 0;
      gPSSatelliteCount_ = 0;
      gPSgSignalLevel_ = 0;
      flightWindWarning_ = 0;
      remainingFlightTime_ = 0;
      timeNeededToGoHome_ = 0;
      airSenseWarningLevel_ = 0;
      mobileStationAltitude_ = 0F;
      fusionMobileStationAltitude_ = 0F;
      baseStationAltitude_ = 0F;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private FlightController(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              areMotorsOn_ = input.readBool();
              break;
            }
            case 16: {

              isFlying_ = input.readBool();
              break;
            }
            case 25: {

              latitude_ = input.readDouble();
              break;
            }
            case 33: {

              longitude_ = input.readDouble();
              break;
            }
            case 41: {

              altitude_ = input.readDouble();
              break;
            }
            case 53: {

              takeoffLocationAltitude_ = input.readFloat();
              break;
            }
            case 57: {

              pitch_ = input.readDouble();
              break;
            }
            case 65: {

              roll_ = input.readDouble();
              break;
            }
            case 73: {

              yaw_ = input.readDouble();
              break;
            }
            case 85: {

              velocityX_ = input.readFloat();
              break;
            }
            case 93: {

              velocityY_ = input.readFloat();
              break;
            }
            case 101: {

              velocityZ_ = input.readFloat();
              break;
            }
            case 104: {

              flightTimeInSeconds_ = input.readInt32();
              break;
            }
            case 112: {
              int rawValue = input.readEnum();

              flightMode_ = rawValue;
              break;
            }
            case 120: {

              gPSSatelliteCount_ = input.readInt32();
              break;
            }
            case 128: {
              int rawValue = input.readEnum();

              gPSgSignalLevel_ = rawValue;
              break;
            }
            case 136: {
              int rawValue = input.readEnum();

              flightWindWarning_ = rawValue;
              break;
            }
            case 144: {

              remainingFlightTime_ = input.readInt32();
              break;
            }
            case 152: {

              timeNeededToGoHome_ = input.readInt32();
              break;
            }
            case 160: {
              int rawValue = input.readEnum();

              airSenseWarningLevel_ = rawValue;
              break;
            }
            case 173: {

              mobileStationAltitude_ = input.readFloat();
              break;
            }
            case 181: {

              fusionMobileStationAltitude_ = input.readFloat();
              break;
            }
            case 189: {

              baseStationAltitude_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cetc.mobile.state.ProtoFlightController.internal_static_FlightController_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cetc.mobile.state.ProtoFlightController.internal_static_FlightController_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cetc.mobile.state.ProtoFlightController.FlightController.class, com.cetc.mobile.state.ProtoFlightController.FlightController.Builder.class);
    }

    /**
     * Protobuf enum {@code FlightController.FlightMode}
     */
    public enum FlightMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MANUAL = 0;</code>
       */
      MANUAL(0),
      /**
       * <code>ATTI = 1;</code>
       */
      ATTI(1),
      /**
       * <code>ATTI_COURSE_LOCK = 2;</code>
       */
      ATTI_COURSE_LOCK(2),
      /**
       * <code>ATTI_HOVER = 3;</code>
       */
      ATTI_HOVER(3),
      /**
       * <code>HOVER = 4;</code>
       */
      HOVER(4),
      /**
       * <code>GPS_BLAKE = 5;</code>
       */
      GPS_BLAKE(5),
      /**
       * <code>GPS_ATTI = 6;</code>
       */
      GPS_ATTI(6),
      /**
       * <code>GPS_COURSE_LOCK = 7;</code>
       */
      GPS_COURSE_LOCK(7),
      /**
       * <code>GPS_HOME_LOCK = 8;</code>
       */
      GPS_HOME_LOCK(8),
      /**
       * <code>GPS_HOT_POINT = 9;</code>
       */
      GPS_HOT_POINT(9),
      /**
       * <code>ASSISTED_TAKEOFF = 10;</code>
       */
      ASSISTED_TAKEOFF(10),
      /**
       * <code>AUTO_TAKEOFF = 11;</code>
       */
      AUTO_TAKEOFF(11),
      /**
       * <code>AUTO_LANDING = 12;</code>
       */
      AUTO_LANDING(12),
      /**
       * <code>ATTI_LANDING = 13;</code>
       */
      ATTI_LANDING(13),
      /**
       * <code>GPS_WAYPOINT = 14;</code>
       */
      GPS_WAYPOINT(14),
      /**
       * <code>GO_HOME = 15;</code>
       */
      GO_HOME(15),
      /**
       * <code>CLICK_GO = 16;</code>
       */
      CLICK_GO(16),
      /**
       * <code>JOYSTICK = 17;</code>
       */
      JOYSTICK(17),
      /**
       * <code>GPS_ATTI_WRISTBAND = 18;</code>
       */
      GPS_ATTI_WRISTBAND(18),
      /**
       * <code>CINEMATIC = 19;</code>
       */
      CINEMATIC(19),
      /**
       * <code>ATTI_LIMITED = 23;</code>
       */
      ATTI_LIMITED(23),
      /**
       * <code>DRAW = 24;</code>
       */
      DRAW(24),
      /**
       * <code>GPS_FOLLOW_ME = 25;</code>
       */
      GPS_FOLLOW_ME(25),
      /**
       * <code>ACTIVE_TRACK = 26;</code>
       */
      ACTIVE_TRACK(26),
      /**
       * <code>TAP_FLY = 27;</code>
       */
      TAP_FLY(27),
      /**
       * <code>PANO = 28;</code>
       */
      PANO(28),
      /**
       * <code>FARMING = 29;</code>
       */
      FARMING(29),
      /**
       * <code>FPV = 30;</code>
       */
      FPV(30),
      /**
       * <code>GPS_SPORT = 31;</code>
       */
      GPS_SPORT(31),
      /**
       * <code>GPS_NOVICE = 32;</code>
       */
      GPS_NOVICE(32),
      /**
       * <code>CONFIRM_LANDING = 33;</code>
       */
      CONFIRM_LANDING(33),
      /**
       * <code>TERRAIN_FOLLOW = 35;</code>
       */
      TERRAIN_FOLLOW(35),
      /**
       * <code>PALM_CONTROL = 36;</code>
       */
      PALM_CONTROL(36),
      /**
       * <code>QUICK_SHOT = 37;</code>
       */
      QUICK_SHOT(37),
      /**
       * <code>TRIPOD = 38;</code>
       */
      TRIPOD(38),
      /**
       * <code>TRACK_SPOTLIGHT = 39;</code>
       */
      TRACK_SPOTLIGHT(39),
      /**
       * <code>MOTORS_JUST_STARTED = 41;</code>
       */
      MOTORS_JUST_STARTED(41),
      /**
       * <code>DETOUR = 43;</code>
       */
      DETOUR(43),
      /**
       * <code>TIME_LAPSE = 46;</code>
       */
      TIME_LAPSE(46),
      /**
       * <code>POI2 = 50;</code>
       */
      POI2(50),
      /**
       * <code>OMNI_MOVING = 49;</code>
       */
      OMNI_MOVING(49),
      /**
       * <code>ADSB_AVOIDING = 48;</code>
       */
      ADSB_AVOIDING(48),
      /**
       * <code>FLIGHT_MODE_UNKNOWN = 255;</code>
       */
      FLIGHT_MODE_UNKNOWN(255),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>MANUAL = 0;</code>
       */
      public static final int MANUAL_VALUE = 0;
      /**
       * <code>ATTI = 1;</code>
       */
      public static final int ATTI_VALUE = 1;
      /**
       * <code>ATTI_COURSE_LOCK = 2;</code>
       */
      public static final int ATTI_COURSE_LOCK_VALUE = 2;
      /**
       * <code>ATTI_HOVER = 3;</code>
       */
      public static final int ATTI_HOVER_VALUE = 3;
      /**
       * <code>HOVER = 4;</code>
       */
      public static final int HOVER_VALUE = 4;
      /**
       * <code>GPS_BLAKE = 5;</code>
       */
      public static final int GPS_BLAKE_VALUE = 5;
      /**
       * <code>GPS_ATTI = 6;</code>
       */
      public static final int GPS_ATTI_VALUE = 6;
      /**
       * <code>GPS_COURSE_LOCK = 7;</code>
       */
      public static final int GPS_COURSE_LOCK_VALUE = 7;
      /**
       * <code>GPS_HOME_LOCK = 8;</code>
       */
      public static final int GPS_HOME_LOCK_VALUE = 8;
      /**
       * <code>GPS_HOT_POINT = 9;</code>
       */
      public static final int GPS_HOT_POINT_VALUE = 9;
      /**
       * <code>ASSISTED_TAKEOFF = 10;</code>
       */
      public static final int ASSISTED_TAKEOFF_VALUE = 10;
      /**
       * <code>AUTO_TAKEOFF = 11;</code>
       */
      public static final int AUTO_TAKEOFF_VALUE = 11;
      /**
       * <code>AUTO_LANDING = 12;</code>
       */
      public static final int AUTO_LANDING_VALUE = 12;
      /**
       * <code>ATTI_LANDING = 13;</code>
       */
      public static final int ATTI_LANDING_VALUE = 13;
      /**
       * <code>GPS_WAYPOINT = 14;</code>
       */
      public static final int GPS_WAYPOINT_VALUE = 14;
      /**
       * <code>GO_HOME = 15;</code>
       */
      public static final int GO_HOME_VALUE = 15;
      /**
       * <code>CLICK_GO = 16;</code>
       */
      public static final int CLICK_GO_VALUE = 16;
      /**
       * <code>JOYSTICK = 17;</code>
       */
      public static final int JOYSTICK_VALUE = 17;
      /**
       * <code>GPS_ATTI_WRISTBAND = 18;</code>
       */
      public static final int GPS_ATTI_WRISTBAND_VALUE = 18;
      /**
       * <code>CINEMATIC = 19;</code>
       */
      public static final int CINEMATIC_VALUE = 19;
      /**
       * <code>ATTI_LIMITED = 23;</code>
       */
      public static final int ATTI_LIMITED_VALUE = 23;
      /**
       * <code>DRAW = 24;</code>
       */
      public static final int DRAW_VALUE = 24;
      /**
       * <code>GPS_FOLLOW_ME = 25;</code>
       */
      public static final int GPS_FOLLOW_ME_VALUE = 25;
      /**
       * <code>ACTIVE_TRACK = 26;</code>
       */
      public static final int ACTIVE_TRACK_VALUE = 26;
      /**
       * <code>TAP_FLY = 27;</code>
       */
      public static final int TAP_FLY_VALUE = 27;
      /**
       * <code>PANO = 28;</code>
       */
      public static final int PANO_VALUE = 28;
      /**
       * <code>FARMING = 29;</code>
       */
      public static final int FARMING_VALUE = 29;
      /**
       * <code>FPV = 30;</code>
       */
      public static final int FPV_VALUE = 30;
      /**
       * <code>GPS_SPORT = 31;</code>
       */
      public static final int GPS_SPORT_VALUE = 31;
      /**
       * <code>GPS_NOVICE = 32;</code>
       */
      public static final int GPS_NOVICE_VALUE = 32;
      /**
       * <code>CONFIRM_LANDING = 33;</code>
       */
      public static final int CONFIRM_LANDING_VALUE = 33;
      /**
       * <code>TERRAIN_FOLLOW = 35;</code>
       */
      public static final int TERRAIN_FOLLOW_VALUE = 35;
      /**
       * <code>PALM_CONTROL = 36;</code>
       */
      public static final int PALM_CONTROL_VALUE = 36;
      /**
       * <code>QUICK_SHOT = 37;</code>
       */
      public static final int QUICK_SHOT_VALUE = 37;
      /**
       * <code>TRIPOD = 38;</code>
       */
      public static final int TRIPOD_VALUE = 38;
      /**
       * <code>TRACK_SPOTLIGHT = 39;</code>
       */
      public static final int TRACK_SPOTLIGHT_VALUE = 39;
      /**
       * <code>MOTORS_JUST_STARTED = 41;</code>
       */
      public static final int MOTORS_JUST_STARTED_VALUE = 41;
      /**
       * <code>DETOUR = 43;</code>
       */
      public static final int DETOUR_VALUE = 43;
      /**
       * <code>TIME_LAPSE = 46;</code>
       */
      public static final int TIME_LAPSE_VALUE = 46;
      /**
       * <code>POI2 = 50;</code>
       */
      public static final int POI2_VALUE = 50;
      /**
       * <code>OMNI_MOVING = 49;</code>
       */
      public static final int OMNI_MOVING_VALUE = 49;
      /**
       * <code>ADSB_AVOIDING = 48;</code>
       */
      public static final int ADSB_AVOIDING_VALUE = 48;
      /**
       * <code>FLIGHT_MODE_UNKNOWN = 255;</code>
       */
      public static final int FLIGHT_MODE_UNKNOWN_VALUE = 255;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FlightMode valueOf(int value) {
        return forNumber(value);
      }

      public static FlightMode forNumber(int value) {
        switch (value) {
          case 0: return MANUAL;
          case 1: return ATTI;
          case 2: return ATTI_COURSE_LOCK;
          case 3: return ATTI_HOVER;
          case 4: return HOVER;
          case 5: return GPS_BLAKE;
          case 6: return GPS_ATTI;
          case 7: return GPS_COURSE_LOCK;
          case 8: return GPS_HOME_LOCK;
          case 9: return GPS_HOT_POINT;
          case 10: return ASSISTED_TAKEOFF;
          case 11: return AUTO_TAKEOFF;
          case 12: return AUTO_LANDING;
          case 13: return ATTI_LANDING;
          case 14: return GPS_WAYPOINT;
          case 15: return GO_HOME;
          case 16: return CLICK_GO;
          case 17: return JOYSTICK;
          case 18: return GPS_ATTI_WRISTBAND;
          case 19: return CINEMATIC;
          case 23: return ATTI_LIMITED;
          case 24: return DRAW;
          case 25: return GPS_FOLLOW_ME;
          case 26: return ACTIVE_TRACK;
          case 27: return TAP_FLY;
          case 28: return PANO;
          case 29: return FARMING;
          case 30: return FPV;
          case 31: return GPS_SPORT;
          case 32: return GPS_NOVICE;
          case 33: return CONFIRM_LANDING;
          case 35: return TERRAIN_FOLLOW;
          case 36: return PALM_CONTROL;
          case 37: return QUICK_SHOT;
          case 38: return TRIPOD;
          case 39: return TRACK_SPOTLIGHT;
          case 41: return MOTORS_JUST_STARTED;
          case 43: return DETOUR;
          case 46: return TIME_LAPSE;
          case 50: return POI2;
          case 49: return OMNI_MOVING;
          case 48: return ADSB_AVOIDING;
          case 255: return FLIGHT_MODE_UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FlightMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FlightMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FlightMode>() {
              public FlightMode findValueByNumber(int number) {
                return FlightMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.cetc.mobile.state.ProtoFlightController.FlightController.getDescriptor().getEnumTypes().get(0);
      }

      private static final FlightMode[] VALUES = values();

      public static FlightMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FlightMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:FlightController.FlightMode)
    }

    /**
     * Protobuf enum {@code FlightController.GPSSignalLevel}
     */
    public enum GPSSignalLevel
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>GPS_LEVEL_0 = 0;</code>
       */
      GPS_LEVEL_0(0),
      /**
       * <code>GPS_LEVEL_1 = 1;</code>
       */
      GPS_LEVEL_1(1),
      /**
       * <code>GPS_LEVEL_2 = 2;</code>
       */
      GPS_LEVEL_2(2),
      /**
       * <code>GPS_LEVEL_3 = 3;</code>
       */
      GPS_LEVEL_3(3),
      /**
       * <code>GPS_LEVEL_4 = 4;</code>
       */
      GPS_LEVEL_4(4),
      /**
       * <code>GPS_LEVEL_5 = 5;</code>
       */
      GPS_LEVEL_5(5),
      /**
       * <code>GPS_NONE = 255;</code>
       */
      GPS_NONE(255),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>GPS_LEVEL_0 = 0;</code>
       */
      public static final int GPS_LEVEL_0_VALUE = 0;
      /**
       * <code>GPS_LEVEL_1 = 1;</code>
       */
      public static final int GPS_LEVEL_1_VALUE = 1;
      /**
       * <code>GPS_LEVEL_2 = 2;</code>
       */
      public static final int GPS_LEVEL_2_VALUE = 2;
      /**
       * <code>GPS_LEVEL_3 = 3;</code>
       */
      public static final int GPS_LEVEL_3_VALUE = 3;
      /**
       * <code>GPS_LEVEL_4 = 4;</code>
       */
      public static final int GPS_LEVEL_4_VALUE = 4;
      /**
       * <code>GPS_LEVEL_5 = 5;</code>
       */
      public static final int GPS_LEVEL_5_VALUE = 5;
      /**
       * <code>GPS_NONE = 255;</code>
       */
      public static final int GPS_NONE_VALUE = 255;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static GPSSignalLevel valueOf(int value) {
        return forNumber(value);
      }

      public static GPSSignalLevel forNumber(int value) {
        switch (value) {
          case 0: return GPS_LEVEL_0;
          case 1: return GPS_LEVEL_1;
          case 2: return GPS_LEVEL_2;
          case 3: return GPS_LEVEL_3;
          case 4: return GPS_LEVEL_4;
          case 5: return GPS_LEVEL_5;
          case 255: return GPS_NONE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GPSSignalLevel>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          GPSSignalLevel> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<GPSSignalLevel>() {
              public GPSSignalLevel findValueByNumber(int number) {
                return GPSSignalLevel.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.cetc.mobile.state.ProtoFlightController.FlightController.getDescriptor().getEnumTypes().get(1);
      }

      private static final GPSSignalLevel[] VALUES = values();

      public static GPSSignalLevel valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private GPSSignalLevel(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:FlightController.GPSSignalLevel)
    }

    /**
     * Protobuf enum {@code FlightController.FlightWindWarning}
     */
    public enum FlightWindWarning
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>WIND_LEVEL_0 = 0;</code>
       */
      WIND_LEVEL_0(0),
      /**
       * <code>WIND_LEVEL_1 = 1;</code>
       */
      WIND_LEVEL_1(1),
      /**
       * <code>WIND_LEVEL_2 = 2;</code>
       */
      WIND_LEVEL_2(2),
      /**
       * <code>WIND_UNKNOWN = 3;</code>
       */
      WIND_UNKNOWN(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>WIND_LEVEL_0 = 0;</code>
       */
      public static final int WIND_LEVEL_0_VALUE = 0;
      /**
       * <code>WIND_LEVEL_1 = 1;</code>
       */
      public static final int WIND_LEVEL_1_VALUE = 1;
      /**
       * <code>WIND_LEVEL_2 = 2;</code>
       */
      public static final int WIND_LEVEL_2_VALUE = 2;
      /**
       * <code>WIND_UNKNOWN = 3;</code>
       */
      public static final int WIND_UNKNOWN_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FlightWindWarning valueOf(int value) {
        return forNumber(value);
      }

      public static FlightWindWarning forNumber(int value) {
        switch (value) {
          case 0: return WIND_LEVEL_0;
          case 1: return WIND_LEVEL_1;
          case 2: return WIND_LEVEL_2;
          case 3: return WIND_UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FlightWindWarning>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FlightWindWarning> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FlightWindWarning>() {
              public FlightWindWarning findValueByNumber(int number) {
                return FlightWindWarning.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.cetc.mobile.state.ProtoFlightController.FlightController.getDescriptor().getEnumTypes().get(2);
      }

      private static final FlightWindWarning[] VALUES = values();

      public static FlightWindWarning valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private FlightWindWarning(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:FlightController.FlightWindWarning)
    }

    /**
     * Protobuf enum {@code FlightController.AirSenseWarningLevel}
     */
    public enum AirSenseWarningLevel
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>AirSenseWarning_LEVEL_0 = 0;</code>
       */
      AirSenseWarning_LEVEL_0(0),
      /**
       * <code>LEVEL_1 = 1;</code>
       */
      LEVEL_1(1),
      /**
       * <code>LEVEL_2 = 2;</code>
       */
      LEVEL_2(2),
      /**
       * <code>LEVEL_3 = 3;</code>
       */
      LEVEL_3(3),
      /**
       * <code>LEVEL_4 = 4;</code>
       */
      LEVEL_4(4),
      /**
       * <code>UNKNOWN = 100;</code>
       */
      UNKNOWN(100),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>AirSenseWarning_LEVEL_0 = 0;</code>
       */
      public static final int AirSenseWarning_LEVEL_0_VALUE = 0;
      /**
       * <code>LEVEL_1 = 1;</code>
       */
      public static final int LEVEL_1_VALUE = 1;
      /**
       * <code>LEVEL_2 = 2;</code>
       */
      public static final int LEVEL_2_VALUE = 2;
      /**
       * <code>LEVEL_3 = 3;</code>
       */
      public static final int LEVEL_3_VALUE = 3;
      /**
       * <code>LEVEL_4 = 4;</code>
       */
      public static final int LEVEL_4_VALUE = 4;
      /**
       * <code>UNKNOWN = 100;</code>
       */
      public static final int UNKNOWN_VALUE = 100;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AirSenseWarningLevel valueOf(int value) {
        return forNumber(value);
      }

      public static AirSenseWarningLevel forNumber(int value) {
        switch (value) {
          case 0: return AirSenseWarning_LEVEL_0;
          case 1: return LEVEL_1;
          case 2: return LEVEL_2;
          case 3: return LEVEL_3;
          case 4: return LEVEL_4;
          case 100: return UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<AirSenseWarningLevel>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          AirSenseWarningLevel> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<AirSenseWarningLevel>() {
              public AirSenseWarningLevel findValueByNumber(int number) {
                return AirSenseWarningLevel.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.cetc.mobile.state.ProtoFlightController.FlightController.getDescriptor().getEnumTypes().get(3);
      }

      private static final AirSenseWarningLevel[] VALUES = values();

      public static AirSenseWarningLevel valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private AirSenseWarningLevel(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:FlightController.AirSenseWarningLevel)
    }

    public static final int AREMOTORSON_FIELD_NUMBER = 1;
    private boolean areMotorsOn_;
    /**
     * <code>optional bool areMotorsOn = 1;</code>
     */
    public boolean getAreMotorsOn() {
      return areMotorsOn_;
    }

    public static final int ISFLYING_FIELD_NUMBER = 2;
    private boolean isFlying_;
    /**
     * <code>optional bool isFlying = 2;</code>
     */
    public boolean getIsFlying() {
      return isFlying_;
    }

    public static final int LATITUDE_FIELD_NUMBER = 3;
    private double latitude_;
    /**
     * <code>optional double latitude = 3;</code>
     */
    public double getLatitude() {
      return latitude_;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 4;
    private double longitude_;
    /**
     * <code>optional double longitude = 4;</code>
     */
    public double getLongitude() {
      return longitude_;
    }

    public static final int ALTITUDE_FIELD_NUMBER = 5;
    private double altitude_;
    /**
     * <pre>
     *Returns the relative altitude of the aircraft relative to take off location, measured by barometer, in meters.
     * </pre>
     *
     * <code>optional double altitude = 5;</code>
     */
    public double getAltitude() {
      return altitude_;
    }

    public static final int TAKEOFFLOCATIONALTITUDE_FIELD_NUMBER = 6;
    private float takeoffLocationAltitude_;
    /**
     * <pre>
     *Relative altitude of the aircraft home location relative to sea level, in meters.(In flightControllerState)
     * </pre>
     *
     * <code>optional float takeoffLocationAltitude = 6;</code>
     */
    public float getTakeoffLocationAltitude() {
      return takeoffLocationAltitude_;
    }

    public static final int PITCH_FIELD_NUMBER = 7;
    private double pitch_;
    /**
     * <code>optional double pitch = 7;</code>
     */
    public double getPitch() {
      return pitch_;
    }

    public static final int ROLL_FIELD_NUMBER = 8;
    private double roll_;
    /**
     * <code>optional double roll = 8;</code>
     */
    public double getRoll() {
      return roll_;
    }

    public static final int YAW_FIELD_NUMBER = 9;
    private double yaw_;
    /**
     * <code>optional double yaw = 9;</code>
     */
    public double getYaw() {
      return yaw_;
    }

    public static final int VELOCITYX_FIELD_NUMBER = 10;
    private float velocityX_;
    /**
     * <code>optional float velocityX = 10;</code>
     */
    public float getVelocityX() {
      return velocityX_;
    }

    public static final int VELOCITYY_FIELD_NUMBER = 11;
    private float velocityY_;
    /**
     * <code>optional float velocityY = 11;</code>
     */
    public float getVelocityY() {
      return velocityY_;
    }

    public static final int VELOCITYZ_FIELD_NUMBER = 12;
    private float velocityZ_;
    /**
     * <code>optional float velocityZ = 12;</code>
     */
    public float getVelocityZ() {
      return velocityZ_;
    }

    public static final int FLIGHTTIMEINSECONDS_FIELD_NUMBER = 13;
    private int flightTimeInSeconds_;
    /**
     * <code>optional int32 flightTimeInSeconds = 13;</code>
     */
    public int getFlightTimeInSeconds() {
      return flightTimeInSeconds_;
    }

    public static final int FLIGHTMODE_FIELD_NUMBER = 14;
    private int flightMode_;
    /**
     * <code>optional .FlightController.FlightMode flightMode = 14;</code>
     */
    public int getFlightModeValue() {
      return flightMode_;
    }
    /**
     * <code>optional .FlightController.FlightMode flightMode = 14;</code>
     */
    public com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode getFlightMode() {
      com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode result = com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode.valueOf(flightMode_);
      return result == null ? com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode.UNRECOGNIZED : result;
    }

    public static final int GPSSATELLITECOUNT_FIELD_NUMBER = 15;
    private int gPSSatelliteCount_;
    /**
     * <code>optional int32 GPSSatelliteCount = 15;</code>
     */
    public int getGPSSatelliteCount() {
      return gPSSatelliteCount_;
    }

    public static final int GPSGSIGNALLEVEL_FIELD_NUMBER = 16;
    private int gPSgSignalLevel_;
    /**
     * <code>optional .FlightController.GPSSignalLevel GPSgSignalLevel = 16;</code>
     */
    public int getGPSgSignalLevelValue() {
      return gPSgSignalLevel_;
    }
    /**
     * <code>optional .FlightController.GPSSignalLevel GPSgSignalLevel = 16;</code>
     */
    public com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel getGPSgSignalLevel() {
      com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel result = com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel.valueOf(gPSgSignalLevel_);
      return result == null ? com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel.UNRECOGNIZED : result;
    }

    public static final int FLIGHTWINDWARNING_FIELD_NUMBER = 17;
    private int flightWindWarning_;
    /**
     * <code>optional .FlightController.FlightWindWarning flightWindWarning = 17;</code>
     */
    public int getFlightWindWarningValue() {
      return flightWindWarning_;
    }
    /**
     * <code>optional .FlightController.FlightWindWarning flightWindWarning = 17;</code>
     */
    public com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning getFlightWindWarning() {
      com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning result = com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning.valueOf(flightWindWarning_);
      return result == null ? com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning.UNRECOGNIZED : result;
    }

    public static final int REMAININGFLIGHTTIME_FIELD_NUMBER = 18;
    private int remainingFlightTime_;
    /**
     * <pre>
     *The estimated remaining time, in seconds, it will take the aircraft to go home with a 10% battery buffer remaining. This time includes landing the aircraft. If the aircraft is using the simulator, this value will be 0.
     * </pre>
     *
     * <code>optional int32 remainingFlightTime = 18;</code>
     */
    public int getRemainingFlightTime() {
      return remainingFlightTime_;
    }

    public static final int TIMENEEDEDTOGOHOME_FIELD_NUMBER = 19;
    private int timeNeededToGoHome_;
    /**
     * <pre>
     *The estimated time, in seconds, needed for the aircraft to go home from its current location.
     * </pre>
     *
     * <code>optional int32 timeNeededToGoHome = 19;</code>
     */
    public int getTimeNeededToGoHome() {
      return timeNeededToGoHome_;
    }

    public static final int AIRSENSEWARNINGLEVEL_FIELD_NUMBER = 20;
    private int airSenseWarningLevel_;
    /**
     * <code>optional .FlightController.AirSenseWarningLevel airSenseWarningLevel = 20;</code>
     */
    public int getAirSenseWarningLevelValue() {
      return airSenseWarningLevel_;
    }
    /**
     * <code>optional .FlightController.AirSenseWarningLevel airSenseWarningLevel = 20;</code>
     */
    public com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel getAirSenseWarningLevel() {
      com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel result = com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel.valueOf(airSenseWarningLevel_);
      return result == null ? com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel.UNRECOGNIZED : result;
    }

    public static final int MOBILESTATIONALTITUDE_FIELD_NUMBER = 21;
    private float mobileStationAltitude_;
    /**
     * <pre>
     *Altitude of the mobile station's receiver 1 antenna relative, to the ground system location. Units are meters.
     * </pre>
     *
     * <code>optional float mobileStationAltitude = 21;</code>
     */
    public float getMobileStationAltitude() {
      return mobileStationAltitude_;
    }

    public static final int FUSIONMOBILESTATIONALTITUDE_FIELD_NUMBER = 22;
    private float fusionMobileStationAltitude_;
    /**
     * <pre>
     *The fusion altitude of the mobile station. The flight controller fuses the data from GPS, RTK and the barometer. The flight controller uses this altitude for navigation (e.g. waypoint mission) when RTK is available.
     * </pre>
     *
     * <code>optional float fusionMobileStationAltitude = 22;</code>
     */
    public float getFusionMobileStationAltitude() {
      return fusionMobileStationAltitude_;
    }

    public static final int BASESTATIONALTITUDE_FIELD_NUMBER = 23;
    private float baseStationAltitude_;
    /**
     * <pre>
     *Altitude of the base station above sea level, in meters.
     * </pre>
     *
     * <code>optional float baseStationAltitude = 23;</code>
     */
    public float getBaseStationAltitude() {
      return baseStationAltitude_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (areMotorsOn_ != false) {
        output.writeBool(1, areMotorsOn_);
      }
      if (isFlying_ != false) {
        output.writeBool(2, isFlying_);
      }
      if (latitude_ != 0D) {
        output.writeDouble(3, latitude_);
      }
      if (longitude_ != 0D) {
        output.writeDouble(4, longitude_);
      }
      if (altitude_ != 0D) {
        output.writeDouble(5, altitude_);
      }
      if (takeoffLocationAltitude_ != 0F) {
        output.writeFloat(6, takeoffLocationAltitude_);
      }
      if (pitch_ != 0D) {
        output.writeDouble(7, pitch_);
      }
      if (roll_ != 0D) {
        output.writeDouble(8, roll_);
      }
      if (yaw_ != 0D) {
        output.writeDouble(9, yaw_);
      }
      if (velocityX_ != 0F) {
        output.writeFloat(10, velocityX_);
      }
      if (velocityY_ != 0F) {
        output.writeFloat(11, velocityY_);
      }
      if (velocityZ_ != 0F) {
        output.writeFloat(12, velocityZ_);
      }
      if (flightTimeInSeconds_ != 0) {
        output.writeInt32(13, flightTimeInSeconds_);
      }
      if (flightMode_ != com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode.MANUAL.getNumber()) {
        output.writeEnum(14, flightMode_);
      }
      if (gPSSatelliteCount_ != 0) {
        output.writeInt32(15, gPSSatelliteCount_);
      }
      if (gPSgSignalLevel_ != com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel.GPS_LEVEL_0.getNumber()) {
        output.writeEnum(16, gPSgSignalLevel_);
      }
      if (flightWindWarning_ != com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning.WIND_LEVEL_0.getNumber()) {
        output.writeEnum(17, flightWindWarning_);
      }
      if (remainingFlightTime_ != 0) {
        output.writeInt32(18, remainingFlightTime_);
      }
      if (timeNeededToGoHome_ != 0) {
        output.writeInt32(19, timeNeededToGoHome_);
      }
      if (airSenseWarningLevel_ != com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel.AirSenseWarning_LEVEL_0.getNumber()) {
        output.writeEnum(20, airSenseWarningLevel_);
      }
      if (mobileStationAltitude_ != 0F) {
        output.writeFloat(21, mobileStationAltitude_);
      }
      if (fusionMobileStationAltitude_ != 0F) {
        output.writeFloat(22, fusionMobileStationAltitude_);
      }
      if (baseStationAltitude_ != 0F) {
        output.writeFloat(23, baseStationAltitude_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (areMotorsOn_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, areMotorsOn_);
      }
      if (isFlying_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isFlying_);
      }
      if (latitude_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, latitude_);
      }
      if (longitude_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, longitude_);
      }
      if (altitude_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, altitude_);
      }
      if (takeoffLocationAltitude_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, takeoffLocationAltitude_);
      }
      if (pitch_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, pitch_);
      }
      if (roll_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, roll_);
      }
      if (yaw_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, yaw_);
      }
      if (velocityX_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, velocityX_);
      }
      if (velocityY_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, velocityY_);
      }
      if (velocityZ_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, velocityZ_);
      }
      if (flightTimeInSeconds_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, flightTimeInSeconds_);
      }
      if (flightMode_ != com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode.MANUAL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(14, flightMode_);
      }
      if (gPSSatelliteCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, gPSSatelliteCount_);
      }
      if (gPSgSignalLevel_ != com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel.GPS_LEVEL_0.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, gPSgSignalLevel_);
      }
      if (flightWindWarning_ != com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning.WIND_LEVEL_0.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, flightWindWarning_);
      }
      if (remainingFlightTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, remainingFlightTime_);
      }
      if (timeNeededToGoHome_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, timeNeededToGoHome_);
      }
      if (airSenseWarningLevel_ != com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel.AirSenseWarning_LEVEL_0.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(20, airSenseWarningLevel_);
      }
      if (mobileStationAltitude_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(21, mobileStationAltitude_);
      }
      if (fusionMobileStationAltitude_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, fusionMobileStationAltitude_);
      }
      if (baseStationAltitude_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(23, baseStationAltitude_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cetc.mobile.state.ProtoFlightController.FlightController)) {
        return super.equals(obj);
      }
      com.cetc.mobile.state.ProtoFlightController.FlightController other = (com.cetc.mobile.state.ProtoFlightController.FlightController) obj;

      boolean result = true;
      result = result && (getAreMotorsOn()
          == other.getAreMotorsOn());
      result = result && (getIsFlying()
          == other.getIsFlying());
      result = result && (
          java.lang.Double.doubleToLongBits(getLatitude())
          == java.lang.Double.doubleToLongBits(
              other.getLatitude()));
      result = result && (
          java.lang.Double.doubleToLongBits(getLongitude())
          == java.lang.Double.doubleToLongBits(
              other.getLongitude()));
      result = result && (
          java.lang.Double.doubleToLongBits(getAltitude())
          == java.lang.Double.doubleToLongBits(
              other.getAltitude()));
      result = result && (
          java.lang.Float.floatToIntBits(getTakeoffLocationAltitude())
          == java.lang.Float.floatToIntBits(
              other.getTakeoffLocationAltitude()));
      result = result && (
          java.lang.Double.doubleToLongBits(getPitch())
          == java.lang.Double.doubleToLongBits(
              other.getPitch()));
      result = result && (
          java.lang.Double.doubleToLongBits(getRoll())
          == java.lang.Double.doubleToLongBits(
              other.getRoll()));
      result = result && (
          java.lang.Double.doubleToLongBits(getYaw())
          == java.lang.Double.doubleToLongBits(
              other.getYaw()));
      result = result && (
          java.lang.Float.floatToIntBits(getVelocityX())
          == java.lang.Float.floatToIntBits(
              other.getVelocityX()));
      result = result && (
          java.lang.Float.floatToIntBits(getVelocityY())
          == java.lang.Float.floatToIntBits(
              other.getVelocityY()));
      result = result && (
          java.lang.Float.floatToIntBits(getVelocityZ())
          == java.lang.Float.floatToIntBits(
              other.getVelocityZ()));
      result = result && (getFlightTimeInSeconds()
          == other.getFlightTimeInSeconds());
      result = result && flightMode_ == other.flightMode_;
      result = result && (getGPSSatelliteCount()
          == other.getGPSSatelliteCount());
      result = result && gPSgSignalLevel_ == other.gPSgSignalLevel_;
      result = result && flightWindWarning_ == other.flightWindWarning_;
      result = result && (getRemainingFlightTime()
          == other.getRemainingFlightTime());
      result = result && (getTimeNeededToGoHome()
          == other.getTimeNeededToGoHome());
      result = result && airSenseWarningLevel_ == other.airSenseWarningLevel_;
      result = result && (
          java.lang.Float.floatToIntBits(getMobileStationAltitude())
          == java.lang.Float.floatToIntBits(
              other.getMobileStationAltitude()));
      result = result && (
          java.lang.Float.floatToIntBits(getFusionMobileStationAltitude())
          == java.lang.Float.floatToIntBits(
              other.getFusionMobileStationAltitude()));
      result = result && (
          java.lang.Float.floatToIntBits(getBaseStationAltitude())
          == java.lang.Float.floatToIntBits(
              other.getBaseStationAltitude()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + AREMOTORSON_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getAreMotorsOn());
      hash = (37 * hash) + ISFLYING_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsFlying());
      hash = (37 * hash) + LATITUDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLatitude()));
      hash = (37 * hash) + LONGITUDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLongitude()));
      hash = (37 * hash) + ALTITUDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAltitude()));
      hash = (37 * hash) + TAKEOFFLOCATIONALTITUDE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getTakeoffLocationAltitude());
      hash = (37 * hash) + PITCH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPitch()));
      hash = (37 * hash) + ROLL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRoll()));
      hash = (37 * hash) + YAW_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getYaw()));
      hash = (37 * hash) + VELOCITYX_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getVelocityX());
      hash = (37 * hash) + VELOCITYY_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getVelocityY());
      hash = (37 * hash) + VELOCITYZ_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getVelocityZ());
      hash = (37 * hash) + FLIGHTTIMEINSECONDS_FIELD_NUMBER;
      hash = (53 * hash) + getFlightTimeInSeconds();
      hash = (37 * hash) + FLIGHTMODE_FIELD_NUMBER;
      hash = (53 * hash) + flightMode_;
      hash = (37 * hash) + GPSSATELLITECOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getGPSSatelliteCount();
      hash = (37 * hash) + GPSGSIGNALLEVEL_FIELD_NUMBER;
      hash = (53 * hash) + gPSgSignalLevel_;
      hash = (37 * hash) + FLIGHTWINDWARNING_FIELD_NUMBER;
      hash = (53 * hash) + flightWindWarning_;
      hash = (37 * hash) + REMAININGFLIGHTTIME_FIELD_NUMBER;
      hash = (53 * hash) + getRemainingFlightTime();
      hash = (37 * hash) + TIMENEEDEDTOGOHOME_FIELD_NUMBER;
      hash = (53 * hash) + getTimeNeededToGoHome();
      hash = (37 * hash) + AIRSENSEWARNINGLEVEL_FIELD_NUMBER;
      hash = (53 * hash) + airSenseWarningLevel_;
      hash = (37 * hash) + MOBILESTATIONALTITUDE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getMobileStationAltitude());
      hash = (37 * hash) + FUSIONMOBILESTATIONALTITUDE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getFusionMobileStationAltitude());
      hash = (37 * hash) + BASESTATIONALTITUDE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getBaseStationAltitude());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cetc.mobile.state.ProtoFlightController.FlightController parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cetc.mobile.state.ProtoFlightController.FlightController parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cetc.mobile.state.ProtoFlightController.FlightController parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cetc.mobile.state.ProtoFlightController.FlightController parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cetc.mobile.state.ProtoFlightController.FlightController parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cetc.mobile.state.ProtoFlightController.FlightController parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cetc.mobile.state.ProtoFlightController.FlightController parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.cetc.mobile.state.ProtoFlightController.FlightController parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cetc.mobile.state.ProtoFlightController.FlightController parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cetc.mobile.state.ProtoFlightController.FlightController parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cetc.mobile.state.ProtoFlightController.FlightController prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code FlightController}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:FlightController)
        com.cetc.mobile.state.ProtoFlightController.FlightControllerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cetc.mobile.state.ProtoFlightController.internal_static_FlightController_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cetc.mobile.state.ProtoFlightController.internal_static_FlightController_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cetc.mobile.state.ProtoFlightController.FlightController.class, com.cetc.mobile.state.ProtoFlightController.FlightController.Builder.class);
      }

      // Construct using com.cetc.mobile.state.ProtoFlightController.FlightController.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        areMotorsOn_ = false;

        isFlying_ = false;

        latitude_ = 0D;

        longitude_ = 0D;

        altitude_ = 0D;

        takeoffLocationAltitude_ = 0F;

        pitch_ = 0D;

        roll_ = 0D;

        yaw_ = 0D;

        velocityX_ = 0F;

        velocityY_ = 0F;

        velocityZ_ = 0F;

        flightTimeInSeconds_ = 0;

        flightMode_ = 0;

        gPSSatelliteCount_ = 0;

        gPSgSignalLevel_ = 0;

        flightWindWarning_ = 0;

        remainingFlightTime_ = 0;

        timeNeededToGoHome_ = 0;

        airSenseWarningLevel_ = 0;

        mobileStationAltitude_ = 0F;

        fusionMobileStationAltitude_ = 0F;

        baseStationAltitude_ = 0F;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cetc.mobile.state.ProtoFlightController.internal_static_FlightController_descriptor;
      }

      public com.cetc.mobile.state.ProtoFlightController.FlightController getDefaultInstanceForType() {
        return com.cetc.mobile.state.ProtoFlightController.FlightController.getDefaultInstance();
      }

      public com.cetc.mobile.state.ProtoFlightController.FlightController build() {
        com.cetc.mobile.state.ProtoFlightController.FlightController result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.cetc.mobile.state.ProtoFlightController.FlightController buildPartial() {
        com.cetc.mobile.state.ProtoFlightController.FlightController result = new com.cetc.mobile.state.ProtoFlightController.FlightController(this);
        result.areMotorsOn_ = areMotorsOn_;
        result.isFlying_ = isFlying_;
        result.latitude_ = latitude_;
        result.longitude_ = longitude_;
        result.altitude_ = altitude_;
        result.takeoffLocationAltitude_ = takeoffLocationAltitude_;
        result.pitch_ = pitch_;
        result.roll_ = roll_;
        result.yaw_ = yaw_;
        result.velocityX_ = velocityX_;
        result.velocityY_ = velocityY_;
        result.velocityZ_ = velocityZ_;
        result.flightTimeInSeconds_ = flightTimeInSeconds_;
        result.flightMode_ = flightMode_;
        result.gPSSatelliteCount_ = gPSSatelliteCount_;
        result.gPSgSignalLevel_ = gPSgSignalLevel_;
        result.flightWindWarning_ = flightWindWarning_;
        result.remainingFlightTime_ = remainingFlightTime_;
        result.timeNeededToGoHome_ = timeNeededToGoHome_;
        result.airSenseWarningLevel_ = airSenseWarningLevel_;
        result.mobileStationAltitude_ = mobileStationAltitude_;
        result.fusionMobileStationAltitude_ = fusionMobileStationAltitude_;
        result.baseStationAltitude_ = baseStationAltitude_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cetc.mobile.state.ProtoFlightController.FlightController) {
          return mergeFrom((com.cetc.mobile.state.ProtoFlightController.FlightController)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cetc.mobile.state.ProtoFlightController.FlightController other) {
        if (other == com.cetc.mobile.state.ProtoFlightController.FlightController.getDefaultInstance()) return this;
        if (other.getAreMotorsOn() != false) {
          setAreMotorsOn(other.getAreMotorsOn());
        }
        if (other.getIsFlying() != false) {
          setIsFlying(other.getIsFlying());
        }
        if (other.getLatitude() != 0D) {
          setLatitude(other.getLatitude());
        }
        if (other.getLongitude() != 0D) {
          setLongitude(other.getLongitude());
        }
        if (other.getAltitude() != 0D) {
          setAltitude(other.getAltitude());
        }
        if (other.getTakeoffLocationAltitude() != 0F) {
          setTakeoffLocationAltitude(other.getTakeoffLocationAltitude());
        }
        if (other.getPitch() != 0D) {
          setPitch(other.getPitch());
        }
        if (other.getRoll() != 0D) {
          setRoll(other.getRoll());
        }
        if (other.getYaw() != 0D) {
          setYaw(other.getYaw());
        }
        if (other.getVelocityX() != 0F) {
          setVelocityX(other.getVelocityX());
        }
        if (other.getVelocityY() != 0F) {
          setVelocityY(other.getVelocityY());
        }
        if (other.getVelocityZ() != 0F) {
          setVelocityZ(other.getVelocityZ());
        }
        if (other.getFlightTimeInSeconds() != 0) {
          setFlightTimeInSeconds(other.getFlightTimeInSeconds());
        }
        if (other.flightMode_ != 0) {
          setFlightModeValue(other.getFlightModeValue());
        }
        if (other.getGPSSatelliteCount() != 0) {
          setGPSSatelliteCount(other.getGPSSatelliteCount());
        }
        if (other.gPSgSignalLevel_ != 0) {
          setGPSgSignalLevelValue(other.getGPSgSignalLevelValue());
        }
        if (other.flightWindWarning_ != 0) {
          setFlightWindWarningValue(other.getFlightWindWarningValue());
        }
        if (other.getRemainingFlightTime() != 0) {
          setRemainingFlightTime(other.getRemainingFlightTime());
        }
        if (other.getTimeNeededToGoHome() != 0) {
          setTimeNeededToGoHome(other.getTimeNeededToGoHome());
        }
        if (other.airSenseWarningLevel_ != 0) {
          setAirSenseWarningLevelValue(other.getAirSenseWarningLevelValue());
        }
        if (other.getMobileStationAltitude() != 0F) {
          setMobileStationAltitude(other.getMobileStationAltitude());
        }
        if (other.getFusionMobileStationAltitude() != 0F) {
          setFusionMobileStationAltitude(other.getFusionMobileStationAltitude());
        }
        if (other.getBaseStationAltitude() != 0F) {
          setBaseStationAltitude(other.getBaseStationAltitude());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.cetc.mobile.state.ProtoFlightController.FlightController parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.cetc.mobile.state.ProtoFlightController.FlightController) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean areMotorsOn_ ;
      /**
       * <code>optional bool areMotorsOn = 1;</code>
       */
      public boolean getAreMotorsOn() {
        return areMotorsOn_;
      }
      /**
       * <code>optional bool areMotorsOn = 1;</code>
       */
      public Builder setAreMotorsOn(boolean value) {
        
        areMotorsOn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool areMotorsOn = 1;</code>
       */
      public Builder clearAreMotorsOn() {
        
        areMotorsOn_ = false;
        onChanged();
        return this;
      }

      private boolean isFlying_ ;
      /**
       * <code>optional bool isFlying = 2;</code>
       */
      public boolean getIsFlying() {
        return isFlying_;
      }
      /**
       * <code>optional bool isFlying = 2;</code>
       */
      public Builder setIsFlying(boolean value) {
        
        isFlying_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isFlying = 2;</code>
       */
      public Builder clearIsFlying() {
        
        isFlying_ = false;
        onChanged();
        return this;
      }

      private double latitude_ ;
      /**
       * <code>optional double latitude = 3;</code>
       */
      public double getLatitude() {
        return latitude_;
      }
      /**
       * <code>optional double latitude = 3;</code>
       */
      public Builder setLatitude(double value) {
        
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double latitude = 3;</code>
       */
      public Builder clearLatitude() {
        
        latitude_ = 0D;
        onChanged();
        return this;
      }

      private double longitude_ ;
      /**
       * <code>optional double longitude = 4;</code>
       */
      public double getLongitude() {
        return longitude_;
      }
      /**
       * <code>optional double longitude = 4;</code>
       */
      public Builder setLongitude(double value) {
        
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double longitude = 4;</code>
       */
      public Builder clearLongitude() {
        
        longitude_ = 0D;
        onChanged();
        return this;
      }

      private double altitude_ ;
      /**
       * <pre>
       *Returns the relative altitude of the aircraft relative to take off location, measured by barometer, in meters.
       * </pre>
       *
       * <code>optional double altitude = 5;</code>
       */
      public double getAltitude() {
        return altitude_;
      }
      /**
       * <pre>
       *Returns the relative altitude of the aircraft relative to take off location, measured by barometer, in meters.
       * </pre>
       *
       * <code>optional double altitude = 5;</code>
       */
      public Builder setAltitude(double value) {
        
        altitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Returns the relative altitude of the aircraft relative to take off location, measured by barometer, in meters.
       * </pre>
       *
       * <code>optional double altitude = 5;</code>
       */
      public Builder clearAltitude() {
        
        altitude_ = 0D;
        onChanged();
        return this;
      }

      private float takeoffLocationAltitude_ ;
      /**
       * <pre>
       *Relative altitude of the aircraft home location relative to sea level, in meters.(In flightControllerState)
       * </pre>
       *
       * <code>optional float takeoffLocationAltitude = 6;</code>
       */
      public float getTakeoffLocationAltitude() {
        return takeoffLocationAltitude_;
      }
      /**
       * <pre>
       *Relative altitude of the aircraft home location relative to sea level, in meters.(In flightControllerState)
       * </pre>
       *
       * <code>optional float takeoffLocationAltitude = 6;</code>
       */
      public Builder setTakeoffLocationAltitude(float value) {
        
        takeoffLocationAltitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Relative altitude of the aircraft home location relative to sea level, in meters.(In flightControllerState)
       * </pre>
       *
       * <code>optional float takeoffLocationAltitude = 6;</code>
       */
      public Builder clearTakeoffLocationAltitude() {
        
        takeoffLocationAltitude_ = 0F;
        onChanged();
        return this;
      }

      private double pitch_ ;
      /**
       * <code>optional double pitch = 7;</code>
       */
      public double getPitch() {
        return pitch_;
      }
      /**
       * <code>optional double pitch = 7;</code>
       */
      public Builder setPitch(double value) {
        
        pitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double pitch = 7;</code>
       */
      public Builder clearPitch() {
        
        pitch_ = 0D;
        onChanged();
        return this;
      }

      private double roll_ ;
      /**
       * <code>optional double roll = 8;</code>
       */
      public double getRoll() {
        return roll_;
      }
      /**
       * <code>optional double roll = 8;</code>
       */
      public Builder setRoll(double value) {
        
        roll_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double roll = 8;</code>
       */
      public Builder clearRoll() {
        
        roll_ = 0D;
        onChanged();
        return this;
      }

      private double yaw_ ;
      /**
       * <code>optional double yaw = 9;</code>
       */
      public double getYaw() {
        return yaw_;
      }
      /**
       * <code>optional double yaw = 9;</code>
       */
      public Builder setYaw(double value) {
        
        yaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double yaw = 9;</code>
       */
      public Builder clearYaw() {
        
        yaw_ = 0D;
        onChanged();
        return this;
      }

      private float velocityX_ ;
      /**
       * <code>optional float velocityX = 10;</code>
       */
      public float getVelocityX() {
        return velocityX_;
      }
      /**
       * <code>optional float velocityX = 10;</code>
       */
      public Builder setVelocityX(float value) {
        
        velocityX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float velocityX = 10;</code>
       */
      public Builder clearVelocityX() {
        
        velocityX_ = 0F;
        onChanged();
        return this;
      }

      private float velocityY_ ;
      /**
       * <code>optional float velocityY = 11;</code>
       */
      public float getVelocityY() {
        return velocityY_;
      }
      /**
       * <code>optional float velocityY = 11;</code>
       */
      public Builder setVelocityY(float value) {
        
        velocityY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float velocityY = 11;</code>
       */
      public Builder clearVelocityY() {
        
        velocityY_ = 0F;
        onChanged();
        return this;
      }

      private float velocityZ_ ;
      /**
       * <code>optional float velocityZ = 12;</code>
       */
      public float getVelocityZ() {
        return velocityZ_;
      }
      /**
       * <code>optional float velocityZ = 12;</code>
       */
      public Builder setVelocityZ(float value) {
        
        velocityZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float velocityZ = 12;</code>
       */
      public Builder clearVelocityZ() {
        
        velocityZ_ = 0F;
        onChanged();
        return this;
      }

      private int flightTimeInSeconds_ ;
      /**
       * <code>optional int32 flightTimeInSeconds = 13;</code>
       */
      public int getFlightTimeInSeconds() {
        return flightTimeInSeconds_;
      }
      /**
       * <code>optional int32 flightTimeInSeconds = 13;</code>
       */
      public Builder setFlightTimeInSeconds(int value) {
        
        flightTimeInSeconds_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flightTimeInSeconds = 13;</code>
       */
      public Builder clearFlightTimeInSeconds() {
        
        flightTimeInSeconds_ = 0;
        onChanged();
        return this;
      }

      private int flightMode_ = 0;
      /**
       * <code>optional .FlightController.FlightMode flightMode = 14;</code>
       */
      public int getFlightModeValue() {
        return flightMode_;
      }
      /**
       * <code>optional .FlightController.FlightMode flightMode = 14;</code>
       */
      public Builder setFlightModeValue(int value) {
        flightMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .FlightController.FlightMode flightMode = 14;</code>
       */
      public com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode getFlightMode() {
        com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode result = com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode.valueOf(flightMode_);
        return result == null ? com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode.UNRECOGNIZED : result;
      }
      /**
       * <code>optional .FlightController.FlightMode flightMode = 14;</code>
       */
      public Builder setFlightMode(com.cetc.mobile.state.ProtoFlightController.FlightController.FlightMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        flightMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .FlightController.FlightMode flightMode = 14;</code>
       */
      public Builder clearFlightMode() {
        
        flightMode_ = 0;
        onChanged();
        return this;
      }

      private int gPSSatelliteCount_ ;
      /**
       * <code>optional int32 GPSSatelliteCount = 15;</code>
       */
      public int getGPSSatelliteCount() {
        return gPSSatelliteCount_;
      }
      /**
       * <code>optional int32 GPSSatelliteCount = 15;</code>
       */
      public Builder setGPSSatelliteCount(int value) {
        
        gPSSatelliteCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 GPSSatelliteCount = 15;</code>
       */
      public Builder clearGPSSatelliteCount() {
        
        gPSSatelliteCount_ = 0;
        onChanged();
        return this;
      }

      private int gPSgSignalLevel_ = 0;
      /**
       * <code>optional .FlightController.GPSSignalLevel GPSgSignalLevel = 16;</code>
       */
      public int getGPSgSignalLevelValue() {
        return gPSgSignalLevel_;
      }
      /**
       * <code>optional .FlightController.GPSSignalLevel GPSgSignalLevel = 16;</code>
       */
      public Builder setGPSgSignalLevelValue(int value) {
        gPSgSignalLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .FlightController.GPSSignalLevel GPSgSignalLevel = 16;</code>
       */
      public com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel getGPSgSignalLevel() {
        com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel result = com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel.valueOf(gPSgSignalLevel_);
        return result == null ? com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel.UNRECOGNIZED : result;
      }
      /**
       * <code>optional .FlightController.GPSSignalLevel GPSgSignalLevel = 16;</code>
       */
      public Builder setGPSgSignalLevel(com.cetc.mobile.state.ProtoFlightController.FlightController.GPSSignalLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        gPSgSignalLevel_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .FlightController.GPSSignalLevel GPSgSignalLevel = 16;</code>
       */
      public Builder clearGPSgSignalLevel() {
        
        gPSgSignalLevel_ = 0;
        onChanged();
        return this;
      }

      private int flightWindWarning_ = 0;
      /**
       * <code>optional .FlightController.FlightWindWarning flightWindWarning = 17;</code>
       */
      public int getFlightWindWarningValue() {
        return flightWindWarning_;
      }
      /**
       * <code>optional .FlightController.FlightWindWarning flightWindWarning = 17;</code>
       */
      public Builder setFlightWindWarningValue(int value) {
        flightWindWarning_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .FlightController.FlightWindWarning flightWindWarning = 17;</code>
       */
      public com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning getFlightWindWarning() {
        com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning result = com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning.valueOf(flightWindWarning_);
        return result == null ? com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning.UNRECOGNIZED : result;
      }
      /**
       * <code>optional .FlightController.FlightWindWarning flightWindWarning = 17;</code>
       */
      public Builder setFlightWindWarning(com.cetc.mobile.state.ProtoFlightController.FlightController.FlightWindWarning value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        flightWindWarning_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .FlightController.FlightWindWarning flightWindWarning = 17;</code>
       */
      public Builder clearFlightWindWarning() {
        
        flightWindWarning_ = 0;
        onChanged();
        return this;
      }

      private int remainingFlightTime_ ;
      /**
       * <pre>
       *The estimated remaining time, in seconds, it will take the aircraft to go home with a 10% battery buffer remaining. This time includes landing the aircraft. If the aircraft is using the simulator, this value will be 0.
       * </pre>
       *
       * <code>optional int32 remainingFlightTime = 18;</code>
       */
      public int getRemainingFlightTime() {
        return remainingFlightTime_;
      }
      /**
       * <pre>
       *The estimated remaining time, in seconds, it will take the aircraft to go home with a 10% battery buffer remaining. This time includes landing the aircraft. If the aircraft is using the simulator, this value will be 0.
       * </pre>
       *
       * <code>optional int32 remainingFlightTime = 18;</code>
       */
      public Builder setRemainingFlightTime(int value) {
        
        remainingFlightTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *The estimated remaining time, in seconds, it will take the aircraft to go home with a 10% battery buffer remaining. This time includes landing the aircraft. If the aircraft is using the simulator, this value will be 0.
       * </pre>
       *
       * <code>optional int32 remainingFlightTime = 18;</code>
       */
      public Builder clearRemainingFlightTime() {
        
        remainingFlightTime_ = 0;
        onChanged();
        return this;
      }

      private int timeNeededToGoHome_ ;
      /**
       * <pre>
       *The estimated time, in seconds, needed for the aircraft to go home from its current location.
       * </pre>
       *
       * <code>optional int32 timeNeededToGoHome = 19;</code>
       */
      public int getTimeNeededToGoHome() {
        return timeNeededToGoHome_;
      }
      /**
       * <pre>
       *The estimated time, in seconds, needed for the aircraft to go home from its current location.
       * </pre>
       *
       * <code>optional int32 timeNeededToGoHome = 19;</code>
       */
      public Builder setTimeNeededToGoHome(int value) {
        
        timeNeededToGoHome_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *The estimated time, in seconds, needed for the aircraft to go home from its current location.
       * </pre>
       *
       * <code>optional int32 timeNeededToGoHome = 19;</code>
       */
      public Builder clearTimeNeededToGoHome() {
        
        timeNeededToGoHome_ = 0;
        onChanged();
        return this;
      }

      private int airSenseWarningLevel_ = 0;
      /**
       * <code>optional .FlightController.AirSenseWarningLevel airSenseWarningLevel = 20;</code>
       */
      public int getAirSenseWarningLevelValue() {
        return airSenseWarningLevel_;
      }
      /**
       * <code>optional .FlightController.AirSenseWarningLevel airSenseWarningLevel = 20;</code>
       */
      public Builder setAirSenseWarningLevelValue(int value) {
        airSenseWarningLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .FlightController.AirSenseWarningLevel airSenseWarningLevel = 20;</code>
       */
      public com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel getAirSenseWarningLevel() {
        com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel result = com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel.valueOf(airSenseWarningLevel_);
        return result == null ? com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel.UNRECOGNIZED : result;
      }
      /**
       * <code>optional .FlightController.AirSenseWarningLevel airSenseWarningLevel = 20;</code>
       */
      public Builder setAirSenseWarningLevel(com.cetc.mobile.state.ProtoFlightController.FlightController.AirSenseWarningLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        airSenseWarningLevel_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .FlightController.AirSenseWarningLevel airSenseWarningLevel = 20;</code>
       */
      public Builder clearAirSenseWarningLevel() {
        
        airSenseWarningLevel_ = 0;
        onChanged();
        return this;
      }

      private float mobileStationAltitude_ ;
      /**
       * <pre>
       *Altitude of the mobile station's receiver 1 antenna relative, to the ground system location. Units are meters.
       * </pre>
       *
       * <code>optional float mobileStationAltitude = 21;</code>
       */
      public float getMobileStationAltitude() {
        return mobileStationAltitude_;
      }
      /**
       * <pre>
       *Altitude of the mobile station's receiver 1 antenna relative, to the ground system location. Units are meters.
       * </pre>
       *
       * <code>optional float mobileStationAltitude = 21;</code>
       */
      public Builder setMobileStationAltitude(float value) {
        
        mobileStationAltitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Altitude of the mobile station's receiver 1 antenna relative, to the ground system location. Units are meters.
       * </pre>
       *
       * <code>optional float mobileStationAltitude = 21;</code>
       */
      public Builder clearMobileStationAltitude() {
        
        mobileStationAltitude_ = 0F;
        onChanged();
        return this;
      }

      private float fusionMobileStationAltitude_ ;
      /**
       * <pre>
       *The fusion altitude of the mobile station. The flight controller fuses the data from GPS, RTK and the barometer. The flight controller uses this altitude for navigation (e.g. waypoint mission) when RTK is available.
       * </pre>
       *
       * <code>optional float fusionMobileStationAltitude = 22;</code>
       */
      public float getFusionMobileStationAltitude() {
        return fusionMobileStationAltitude_;
      }
      /**
       * <pre>
       *The fusion altitude of the mobile station. The flight controller fuses the data from GPS, RTK and the barometer. The flight controller uses this altitude for navigation (e.g. waypoint mission) when RTK is available.
       * </pre>
       *
       * <code>optional float fusionMobileStationAltitude = 22;</code>
       */
      public Builder setFusionMobileStationAltitude(float value) {
        
        fusionMobileStationAltitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *The fusion altitude of the mobile station. The flight controller fuses the data from GPS, RTK and the barometer. The flight controller uses this altitude for navigation (e.g. waypoint mission) when RTK is available.
       * </pre>
       *
       * <code>optional float fusionMobileStationAltitude = 22;</code>
       */
      public Builder clearFusionMobileStationAltitude() {
        
        fusionMobileStationAltitude_ = 0F;
        onChanged();
        return this;
      }

      private float baseStationAltitude_ ;
      /**
       * <pre>
       *Altitude of the base station above sea level, in meters.
       * </pre>
       *
       * <code>optional float baseStationAltitude = 23;</code>
       */
      public float getBaseStationAltitude() {
        return baseStationAltitude_;
      }
      /**
       * <pre>
       *Altitude of the base station above sea level, in meters.
       * </pre>
       *
       * <code>optional float baseStationAltitude = 23;</code>
       */
      public Builder setBaseStationAltitude(float value) {
        
        baseStationAltitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Altitude of the base station above sea level, in meters.
       * </pre>
       *
       * <code>optional float baseStationAltitude = 23;</code>
       */
      public Builder clearBaseStationAltitude() {
        
        baseStationAltitude_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:FlightController)
    }

    // @@protoc_insertion_point(class_scope:FlightController)
    private static final com.cetc.mobile.state.ProtoFlightController.FlightController DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cetc.mobile.state.ProtoFlightController.FlightController();
    }

    public static com.cetc.mobile.state.ProtoFlightController.FlightController getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FlightController>
        PARSER = new com.google.protobuf.AbstractParser<FlightController>() {
      public FlightController parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FlightController(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlightController> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlightController> getParserForType() {
      return PARSER;
    }

    public com.cetc.mobile.state.ProtoFlightController.FlightController getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_FlightController_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_FlightController_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034state/FlightController.proto\"\346\r\n\020Fligh" +
      "tController\022\023\n\013areMotorsOn\030\001 \001(\010\022\020\n\010isFl" +
      "ying\030\002 \001(\010\022\020\n\010latitude\030\003 \001(\001\022\021\n\tlongitud" +
      "e\030\004 \001(\001\022\020\n\010altitude\030\005 \001(\001\022\037\n\027takeoffLoca" +
      "tionAltitude\030\006 \001(\002\022\r\n\005pitch\030\007 \001(\001\022\014\n\004rol" +
      "l\030\010 \001(\001\022\013\n\003yaw\030\t \001(\001\022\021\n\tvelocityX\030\n \001(\002\022" +
      "\021\n\tvelocityY\030\013 \001(\002\022\021\n\tvelocityZ\030\014 \001(\002\022\033\n" +
      "\023flightTimeInSeconds\030\r \001(\005\0220\n\nflightMode" +
      "\030\016 \001(\0162\034.FlightController.FlightMode\022\031\n\021" +
      "GPSSatelliteCount\030\017 \001(\005\0229\n\017GPSgSignalLev",
      "el\030\020 \001(\0162 .FlightController.GPSSignalLev" +
      "el\022>\n\021flightWindWarning\030\021 \001(\0162#.FlightCo" +
      "ntroller.FlightWindWarning\022\033\n\023remainingF" +
      "lightTime\030\022 \001(\005\022\032\n\022timeNeededToGoHome\030\023 " +
      "\001(\005\022D\n\024airSenseWarningLevel\030\024 \001(\0162&.Flig" +
      "htController.AirSenseWarningLevel\022\035\n\025mob" +
      "ileStationAltitude\030\025 \001(\002\022#\n\033fusionMobile" +
      "StationAltitude\030\026 \001(\002\022\033\n\023baseStationAlti" +
      "tude\030\027 \001(\002\"\317\005\n\nFlightMode\022\n\n\006MANUAL\020\000\022\010\n" +
      "\004ATTI\020\001\022\024\n\020ATTI_COURSE_LOCK\020\002\022\016\n\nATTI_HO",
      "VER\020\003\022\t\n\005HOVER\020\004\022\r\n\tGPS_BLAKE\020\005\022\014\n\010GPS_A" +
      "TTI\020\006\022\023\n\017GPS_COURSE_LOCK\020\007\022\021\n\rGPS_HOME_L" +
      "OCK\020\010\022\021\n\rGPS_HOT_POINT\020\t\022\024\n\020ASSISTED_TAK" +
      "EOFF\020\n\022\020\n\014AUTO_TAKEOFF\020\013\022\020\n\014AUTO_LANDING" +
      "\020\014\022\020\n\014ATTI_LANDING\020\r\022\020\n\014GPS_WAYPOINT\020\016\022\013" +
      "\n\007GO_HOME\020\017\022\014\n\010CLICK_GO\020\020\022\014\n\010JOYSTICK\020\021\022" +
      "\026\n\022GPS_ATTI_WRISTBAND\020\022\022\r\n\tCINEMATIC\020\023\022\020" +
      "\n\014ATTI_LIMITED\020\027\022\010\n\004DRAW\020\030\022\021\n\rGPS_FOLLOW" +
      "_ME\020\031\022\020\n\014ACTIVE_TRACK\020\032\022\013\n\007TAP_FLY\020\033\022\010\n\004" +
      "PANO\020\034\022\013\n\007FARMING\020\035\022\007\n\003FPV\020\036\022\r\n\tGPS_SPOR",
      "T\020\037\022\016\n\nGPS_NOVICE\020 \022\023\n\017CONFIRM_LANDING\020!" +
      "\022\022\n\016TERRAIN_FOLLOW\020#\022\020\n\014PALM_CONTROL\020$\022\016" +
      "\n\nQUICK_SHOT\020%\022\n\n\006TRIPOD\020&\022\023\n\017TRACK_SPOT" +
      "LIGHT\020\'\022\027\n\023MOTORS_JUST_STARTED\020)\022\n\n\006DETO" +
      "UR\020+\022\016\n\nTIME_LAPSE\020.\022\010\n\004POI2\0202\022\017\n\013OMNI_M" +
      "OVING\0201\022\021\n\rADSB_AVOIDING\0200\022\030\n\023FLIGHT_MOD" +
      "E_UNKNOWN\020\377\001\"\205\001\n\016GPSSignalLevel\022\017\n\013GPS_L" +
      "EVEL_0\020\000\022\017\n\013GPS_LEVEL_1\020\001\022\017\n\013GPS_LEVEL_2" +
      "\020\002\022\017\n\013GPS_LEVEL_3\020\003\022\017\n\013GPS_LEVEL_4\020\004\022\017\n\013" +
      "GPS_LEVEL_5\020\005\022\r\n\010GPS_NONE\020\377\001\"[\n\021FlightWi",
      "ndWarning\022\020\n\014WIND_LEVEL_0\020\000\022\020\n\014WIND_LEVE" +
      "L_1\020\001\022\020\n\014WIND_LEVEL_2\020\002\022\020\n\014WIND_UNKNOWN\020" +
      "\003\"t\n\024AirSenseWarningLevel\022\033\n\027AirSenseWar" +
      "ning_LEVEL_0\020\000\022\013\n\007LEVEL_1\020\001\022\013\n\007LEVEL_2\020\002" +
      "\022\013\n\007LEVEL_3\020\003\022\013\n\007LEVEL_4\020\004\022\013\n\007UNKNOWN\020dB" +
      ".\n\025com.cetc.mobile.stateB\025ProtoFlightCon" +
      "trollerb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_FlightController_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_FlightController_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_FlightController_descriptor,
        new java.lang.String[] { "AreMotorsOn", "IsFlying", "Latitude", "Longitude", "Altitude", "TakeoffLocationAltitude", "Pitch", "Roll", "Yaw", "VelocityX", "VelocityY", "VelocityZ", "FlightTimeInSeconds", "FlightMode", "GPSSatelliteCount", "GPSgSignalLevel", "FlightWindWarning", "RemainingFlightTime", "TimeNeededToGoHome", "AirSenseWarningLevel", "MobileStationAltitude", "FusionMobileStationAltitude", "BaseStationAltitude", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
