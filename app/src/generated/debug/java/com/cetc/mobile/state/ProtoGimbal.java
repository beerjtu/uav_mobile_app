// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state/Gimbal.proto

package com.cetc.mobile.state;

public final class ProtoGimbal {
  private ProtoGimbal() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface GimbalOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Gimbal)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .Gimbal.GimbalMode gimbalMode = 1;</code>
     */
    int getGimbalModeValue();
    /**
     * <code>optional .Gimbal.GimbalMode gimbalMode = 1;</code>
     */
    com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode getGimbalMode();

    /**
     * <code>optional float pitch = 2;</code>
     */
    float getPitch();

    /**
     * <code>optional float roll = 3;</code>
     */
    float getRoll();

    /**
     * <code>optional float yaw = 4;</code>
     */
    float getYaw();
  }
  /**
   * Protobuf type {@code Gimbal}
   */
  public  static final class Gimbal extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Gimbal)
      GimbalOrBuilder {
    // Use Gimbal.newBuilder() to construct.
    private Gimbal(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Gimbal() {
      gimbalMode_ = 0;
      pitch_ = 0F;
      roll_ = 0F;
      yaw_ = 0F;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Gimbal(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              gimbalMode_ = rawValue;
              break;
            }
            case 21: {

              pitch_ = input.readFloat();
              break;
            }
            case 29: {

              roll_ = input.readFloat();
              break;
            }
            case 37: {

              yaw_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cetc.mobile.state.ProtoGimbal.internal_static_Gimbal_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cetc.mobile.state.ProtoGimbal.internal_static_Gimbal_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cetc.mobile.state.ProtoGimbal.Gimbal.class, com.cetc.mobile.state.ProtoGimbal.Gimbal.Builder.class);
    }

    /**
     * Protobuf enum {@code Gimbal.GimbalMode}
     */
    public enum GimbalMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FREE = 0;</code>
       */
      FREE(0),
      /**
       * <code>FPV = 1;</code>
       */
      FPV(1),
      /**
       * <code>YAW_FOLLOW = 2;</code>
       */
      YAW_FOLLOW(2),
      /**
       * <code>UNKNOWN = 255;</code>
       */
      UNKNOWN(255),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>FREE = 0;</code>
       */
      public static final int FREE_VALUE = 0;
      /**
       * <code>FPV = 1;</code>
       */
      public static final int FPV_VALUE = 1;
      /**
       * <code>YAW_FOLLOW = 2;</code>
       */
      public static final int YAW_FOLLOW_VALUE = 2;
      /**
       * <code>UNKNOWN = 255;</code>
       */
      public static final int UNKNOWN_VALUE = 255;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static GimbalMode valueOf(int value) {
        return forNumber(value);
      }

      public static GimbalMode forNumber(int value) {
        switch (value) {
          case 0: return FREE;
          case 1: return FPV;
          case 2: return YAW_FOLLOW;
          case 255: return UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GimbalMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          GimbalMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<GimbalMode>() {
              public GimbalMode findValueByNumber(int number) {
                return GimbalMode.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.cetc.mobile.state.ProtoGimbal.Gimbal.getDescriptor().getEnumTypes().get(0);
      }

      private static final GimbalMode[] VALUES = values();

      public static GimbalMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private GimbalMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Gimbal.GimbalMode)
    }

    public static final int GIMBALMODE_FIELD_NUMBER = 1;
    private int gimbalMode_;
    /**
     * <code>optional .Gimbal.GimbalMode gimbalMode = 1;</code>
     */
    public int getGimbalModeValue() {
      return gimbalMode_;
    }
    /**
     * <code>optional .Gimbal.GimbalMode gimbalMode = 1;</code>
     */
    public com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode getGimbalMode() {
      com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode result = com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode.valueOf(gimbalMode_);
      return result == null ? com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode.UNRECOGNIZED : result;
    }

    public static final int PITCH_FIELD_NUMBER = 2;
    private float pitch_;
    /**
     * <code>optional float pitch = 2;</code>
     */
    public float getPitch() {
      return pitch_;
    }

    public static final int ROLL_FIELD_NUMBER = 3;
    private float roll_;
    /**
     * <code>optional float roll = 3;</code>
     */
    public float getRoll() {
      return roll_;
    }

    public static final int YAW_FIELD_NUMBER = 4;
    private float yaw_;
    /**
     * <code>optional float yaw = 4;</code>
     */
    public float getYaw() {
      return yaw_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (gimbalMode_ != com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode.FREE.getNumber()) {
        output.writeEnum(1, gimbalMode_);
      }
      if (pitch_ != 0F) {
        output.writeFloat(2, pitch_);
      }
      if (roll_ != 0F) {
        output.writeFloat(3, roll_);
      }
      if (yaw_ != 0F) {
        output.writeFloat(4, yaw_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (gimbalMode_ != com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode.FREE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, gimbalMode_);
      }
      if (pitch_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, pitch_);
      }
      if (roll_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, roll_);
      }
      if (yaw_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, yaw_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cetc.mobile.state.ProtoGimbal.Gimbal)) {
        return super.equals(obj);
      }
      com.cetc.mobile.state.ProtoGimbal.Gimbal other = (com.cetc.mobile.state.ProtoGimbal.Gimbal) obj;

      boolean result = true;
      result = result && gimbalMode_ == other.gimbalMode_;
      result = result && (
          java.lang.Float.floatToIntBits(getPitch())
          == java.lang.Float.floatToIntBits(
              other.getPitch()));
      result = result && (
          java.lang.Float.floatToIntBits(getRoll())
          == java.lang.Float.floatToIntBits(
              other.getRoll()));
      result = result && (
          java.lang.Float.floatToIntBits(getYaw())
          == java.lang.Float.floatToIntBits(
              other.getYaw()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + GIMBALMODE_FIELD_NUMBER;
      hash = (53 * hash) + gimbalMode_;
      hash = (37 * hash) + PITCH_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getPitch());
      hash = (37 * hash) + ROLL_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getRoll());
      hash = (37 * hash) + YAW_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getYaw());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cetc.mobile.state.ProtoGimbal.Gimbal parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cetc.mobile.state.ProtoGimbal.Gimbal parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cetc.mobile.state.ProtoGimbal.Gimbal parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cetc.mobile.state.ProtoGimbal.Gimbal parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cetc.mobile.state.ProtoGimbal.Gimbal parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cetc.mobile.state.ProtoGimbal.Gimbal parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cetc.mobile.state.ProtoGimbal.Gimbal parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.cetc.mobile.state.ProtoGimbal.Gimbal parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cetc.mobile.state.ProtoGimbal.Gimbal parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cetc.mobile.state.ProtoGimbal.Gimbal parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cetc.mobile.state.ProtoGimbal.Gimbal prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Gimbal}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Gimbal)
        com.cetc.mobile.state.ProtoGimbal.GimbalOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cetc.mobile.state.ProtoGimbal.internal_static_Gimbal_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cetc.mobile.state.ProtoGimbal.internal_static_Gimbal_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cetc.mobile.state.ProtoGimbal.Gimbal.class, com.cetc.mobile.state.ProtoGimbal.Gimbal.Builder.class);
      }

      // Construct using com.cetc.mobile.state.ProtoGimbal.Gimbal.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        gimbalMode_ = 0;

        pitch_ = 0F;

        roll_ = 0F;

        yaw_ = 0F;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cetc.mobile.state.ProtoGimbal.internal_static_Gimbal_descriptor;
      }

      public com.cetc.mobile.state.ProtoGimbal.Gimbal getDefaultInstanceForType() {
        return com.cetc.mobile.state.ProtoGimbal.Gimbal.getDefaultInstance();
      }

      public com.cetc.mobile.state.ProtoGimbal.Gimbal build() {
        com.cetc.mobile.state.ProtoGimbal.Gimbal result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.cetc.mobile.state.ProtoGimbal.Gimbal buildPartial() {
        com.cetc.mobile.state.ProtoGimbal.Gimbal result = new com.cetc.mobile.state.ProtoGimbal.Gimbal(this);
        result.gimbalMode_ = gimbalMode_;
        result.pitch_ = pitch_;
        result.roll_ = roll_;
        result.yaw_ = yaw_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cetc.mobile.state.ProtoGimbal.Gimbal) {
          return mergeFrom((com.cetc.mobile.state.ProtoGimbal.Gimbal)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cetc.mobile.state.ProtoGimbal.Gimbal other) {
        if (other == com.cetc.mobile.state.ProtoGimbal.Gimbal.getDefaultInstance()) return this;
        if (other.gimbalMode_ != 0) {
          setGimbalModeValue(other.getGimbalModeValue());
        }
        if (other.getPitch() != 0F) {
          setPitch(other.getPitch());
        }
        if (other.getRoll() != 0F) {
          setRoll(other.getRoll());
        }
        if (other.getYaw() != 0F) {
          setYaw(other.getYaw());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.cetc.mobile.state.ProtoGimbal.Gimbal parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.cetc.mobile.state.ProtoGimbal.Gimbal) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int gimbalMode_ = 0;
      /**
       * <code>optional .Gimbal.GimbalMode gimbalMode = 1;</code>
       */
      public int getGimbalModeValue() {
        return gimbalMode_;
      }
      /**
       * <code>optional .Gimbal.GimbalMode gimbalMode = 1;</code>
       */
      public Builder setGimbalModeValue(int value) {
        gimbalMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Gimbal.GimbalMode gimbalMode = 1;</code>
       */
      public com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode getGimbalMode() {
        com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode result = com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode.valueOf(gimbalMode_);
        return result == null ? com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode.UNRECOGNIZED : result;
      }
      /**
       * <code>optional .Gimbal.GimbalMode gimbalMode = 1;</code>
       */
      public Builder setGimbalMode(com.cetc.mobile.state.ProtoGimbal.Gimbal.GimbalMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        gimbalMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .Gimbal.GimbalMode gimbalMode = 1;</code>
       */
      public Builder clearGimbalMode() {
        
        gimbalMode_ = 0;
        onChanged();
        return this;
      }

      private float pitch_ ;
      /**
       * <code>optional float pitch = 2;</code>
       */
      public float getPitch() {
        return pitch_;
      }
      /**
       * <code>optional float pitch = 2;</code>
       */
      public Builder setPitch(float value) {
        
        pitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float pitch = 2;</code>
       */
      public Builder clearPitch() {
        
        pitch_ = 0F;
        onChanged();
        return this;
      }

      private float roll_ ;
      /**
       * <code>optional float roll = 3;</code>
       */
      public float getRoll() {
        return roll_;
      }
      /**
       * <code>optional float roll = 3;</code>
       */
      public Builder setRoll(float value) {
        
        roll_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float roll = 3;</code>
       */
      public Builder clearRoll() {
        
        roll_ = 0F;
        onChanged();
        return this;
      }

      private float yaw_ ;
      /**
       * <code>optional float yaw = 4;</code>
       */
      public float getYaw() {
        return yaw_;
      }
      /**
       * <code>optional float yaw = 4;</code>
       */
      public Builder setYaw(float value) {
        
        yaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float yaw = 4;</code>
       */
      public Builder clearYaw() {
        
        yaw_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:Gimbal)
    }

    // @@protoc_insertion_point(class_scope:Gimbal)
    private static final com.cetc.mobile.state.ProtoGimbal.Gimbal DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cetc.mobile.state.ProtoGimbal.Gimbal();
    }

    public static com.cetc.mobile.state.ProtoGimbal.Gimbal getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Gimbal>
        PARSER = new com.google.protobuf.AbstractParser<Gimbal>() {
      public Gimbal parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Gimbal(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Gimbal> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Gimbal> getParserForType() {
      return PARSER;
    }

    public com.cetc.mobile.state.ProtoGimbal.Gimbal getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Gimbal_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Gimbal_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022state/Gimbal.proto\"\231\001\n\006Gimbal\022&\n\ngimba" +
      "lMode\030\001 \001(\0162\022.Gimbal.GimbalMode\022\r\n\005pitch" +
      "\030\002 \001(\002\022\014\n\004roll\030\003 \001(\002\022\013\n\003yaw\030\004 \001(\002\"=\n\nGim" +
      "balMode\022\010\n\004FREE\020\000\022\007\n\003FPV\020\001\022\016\n\nYAW_FOLLOW" +
      "\020\002\022\014\n\007UNKNOWN\020\377\001B$\n\025com.cetc.mobile.stat" +
      "eB\013ProtoGimbalb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_Gimbal_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Gimbal_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Gimbal_descriptor,
        new java.lang.String[] { "GimbalMode", "Pitch", "Roll", "Yaw", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
